service: infinimonkey
frameworkVersion: ">=1.23.0 <2.0.0"

custom:
  credentialsProfile: heap
  region: eu-west-1
  parentDomainName: heap.fi
  domainName: monkey.heap.fi
  ramblingsTableName: ${self:service}-dev-ramblings
  corpusTableName: ${self:service}-dev-corpus
  corpusBucketName: ${self:service}-corpus-dev

provider:
  name: aws
  runtime: python3.6
  region: ${self:custom.region}
  profile: ${self:custom.credentialsProfile}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.corpusTableName}"
        - "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.ramblingsTableName}"
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:custom.corpusBucketName}"
        - "arn:aws:s3:::${self:custom.corpusBucketName}/*"
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"
  environment:
    CORPUS_TABLE_NAME: ${self:custom.corpusTableName}
    CORPUS_BUCKET_NAME: ${self:custom.corpusBucketName}
    RAMBLINGS_TABLE_NAME: ${self:custom.ramblingsTableName}

functions:
  harvester:
    handler: harvester.handler
    memorySize: 1024
    timeout: 300
    events:
      - schedule: rate(60 minutes)
  rambler:
    handler: rambler.handler
    memorySize: 1024
    timeout: 30
    events:
      - schedule: rate(24 hours)
  apiGetRamblings:
    handler: ramblings-api.get_ramblings
    memorySize: 256
    events:
      - http:
          path: ramblings
          method: get
          cors: true

package:
  exclude:
    - "*.txt"
    - "*.md"
    - "*.yml"
    - "*.json"
    - "*.xml"

resources:
  Resources:

    RamblingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.ramblingsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CorpusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.corpusTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 3

    CorpusBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.corpusBucketName}

    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.domainName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FrontendBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: arn:aws:s3:::${self:custom.domainName}/*
              Principal: "*"

    DomainName:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${self:custom.parentDomainName}.
        Name: ${self:custom.domainName}.
        Type: CNAME
        TTL: 300
        ResourceRecords:
          - ${self:custom.domainName}.s3-website-${self:custom.region}.amazonaws.com
